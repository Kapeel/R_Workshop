Getting Data In and Summarizing
========================================================
author: Isaac Jenkins
date: February 20, 2014

```{r, echo = FALSE, include = FALSE}
opts_chunk$set(prompt = FALSE, cache = TRUE)
```

Workshop Objectives
========================================================
- Start an RStudio Project
- Get an Excel file into R
- Summarize the data **numerically**
- Summarize the data **graphically**
- Abuse the **Base** plotting system
- Practice using R functions

RStudio Projects
========================================================
type: section

Create an RStudio Project
========================================================
- [RStudio Projects](http://www.rstudio.com/ide/docs/using/projects) are handy!
- Let's make one for today's workshop
![Alt text](http://www.rstudio.com/images/docs/projects_new.png)

The Magical Working Directory
========================================================
```{r, getwd, echo = TRUE, eval = FALSE}
getwd()
```

```{r, getwd_disp, echo = FALSE}
# Don't actually run getwd(); displaying fake working directory below
"/Users/isaac/r_ws_day3"
```

![Alt text](http://icj.github.io/R_Workshop/materials/day3/images/getwd.png)

Today, Use the Scripting Window
========================================================
type: alert
- Ctrl + Enter will send the current line to the Console and run it
- You can also highlight several lines and use Ctrl + Enter to send that 
chunk to the Console
- Try it now...
  1. Open a new R Script
  2. Type **```timestamp()```**
  3. With the cursor on the same line, press Ctrl + Enter
  4. Highlight **```timestamp()```** and press Ctrl + Enter
  
```{r, time}
timestamp()
```


How do we get this into R?
========================================================
type: section
![Alt text](http://icj.github.io/R_Workshop/materials/day3/images/excel.png)

Save Excel File as CSV File
========================================================
If you want...
- Get the excel file
**[here](http://icj.github.io/R_Workshop/materials/day3/hotdog.xlsx)**
- Open in Excel (or Libre Office)
- Go to File>Save as... and choose the comma separated values (csv) format 
- Call it **hotdog.csv** and save it in your working directory

Or, Just Download the CSV File
========================================================
- Get the csv file
**[here](http://icj.github.io/R_Workshop/materials/day3/hotdog.csv)**
- Copy the csv file to your working directory using your preferred method 
(e.g., file explorer, Terminal, Finder)
- Or, copy it to your working directory using R (assuming file is in default 
Downloads folder)
```{r, copy_data, eval = FALSE}
# On a MAC (or Linux)
file.copy(from = "~/Downloads/hotdog.csv", to = getwd())
# On Windows (change USERNAME and/or drive)
file.copy(from = "C:/Users/USERNAME/Downloads/hotdog.csv", to = getwd())
```
- Check if it's there
```{r, check_data, eval = TRUE}
file.exists("hotdog.csv")
```

Import the Data
========================================================
```{r, import_data1}
# Read IN a CSV file
myFile <- "hotdog.csv"
hd <- read.csv(myFile)
```

Import Challenge
========================================================
type: prompt
1. If possible, open the file 
**[hotdog.xlsx](http://icj.github.io/R_Workshop/materials/day3/hotdog.xlsx)** 
in Excel (or Libre Office, or Google Drive).
2. In R, use ```head(hd)```, ```str(hd)```, and ```tail(hd)``` to see
if the data resembles what is in the excel file.
3. What are some of the problems?

Import Challenge Solutions
========================================================
type: prompt
```{r, bad_read1_head}
head(hd)
```

Import Challenge Solutions
========================================================
type: prompt
```{r, bad_read1_str}
str(hd)
```

Import Challenge Solutions
========================================================
type: prompt
```{r, bad_read1_tail}
tail(hd)
```

Import Challenge Solutions
========================================================
type: prompt
Problems

1. All columns read in as factors 
  - no numeric data
2. Calculations at bottom of data are read in
  - too many rows

Import the Data - Second Try
========================================================
```{r, import_data2}
hd <- read.csv(myFile, skip = 1, nrows = 54, header = TRUE)
```
- **```skip=```**
  - Tells it to skip this many rows
- **```nrows=```**
  - Tells it how many rows to read in 
- **```header=```**
  - Does the first row contain column names?

Import Challenge
========================================================
type: prompt
1. Confirm that the data was read in correctly.
2. Any other concerns?

Import Challenge Solution
========================================================
type: prompt
The **```Day```** factor is not ordered meaningfully.
```{r, good_read}
str(hd)
levels(hd$Day)
```

Fix Day Factor
========================================================
Want the factor **```Day```** to be in logical order.
```{r, day_factor}
levels(hd$Day)
hd$Day <- factor(hd$Day, levels = c("Mon", "Tue", "Wed", "Thu", "Fri"))
levels(hd$Day)
```

Band-Aid
========================================================
If you could NOT download the file, RUN this now
```{r, url_load, eval = FALSE}
myURL <- "http://icj.github.io/R_Workshop/materials/day3/hotdog.csv"
hd <- read.csv(myURL, skip = 1, nrows = 54, header = TRUE)
hd$Day <- factor(hd$Day, levels = c("Mon", "Tue", "Wed", "Thu", "Fri"))
```

Summarizing Data
========================================================
type: section
Numerically & Graphically

Summarizing Frequencies - 1 & 2 Factors
========================================================
The **```table()```** function builds a contingency table of counts for 
combinations of factor levels.
```{r, table1}
table(hd$Day)
table(hd$Brand, hd$Day)
```

Summarizing Frequencies - 3 Factors
========================================================
```{r, table2}
table(hd$Type, hd$Day, hd$Brand)
```

Table Challenge
========================================================
type: prompt
Run the following commands and comment on what they are doing.
```{r, ch2, eval = FALSE}
hd.tab <- table(hd$Day, hd$Brand) # This stores the table in hd.tab
hd.tab # This prints the table to the screen
prop.table(hd.tab) # This ...
prop.table(hd.tab, 1) # This ...
prop.table(hd.tab, 2) # This ...
margin.table(hd.tab) # This ...
margin.table(hd.tab, 1) # This ...
margin.table(hd.tab, 2) # This ...
```

Table Challenge Solutions
========================================================
type: prompt
```{r, ch2_sol, eval = FALSE}
hd.tab <- table(hd$Day, hd$Brand) # This stores the table in hd.tab
hd.tab # This prints the table to the screen
prop.table(hd.tab) # cell percentages
prop.table(hd.tab, 1) # row percentages
prop.table(hd.tab, 2) # column percentages
margin.table(hd.tab) # sum all cells
margin.table(hd.tab, 1) # sum across rows
margin.table(hd.tab, 2) # sum across columns
```

Bar Plots - 1 Variable
========================================================
```{r, bar1, eval = FALSE}
hd.tab <- table(hd$Type)
barplot(hd.tab)
barplot(hd.tab, horiz = TRUE)
```

```{r, bar1_plot, echo = FALSE, fig.align = 'center', fig.width = 12, fig.height = 7}
par(mfrow = c(1, 2))
<<bar1>>
```

Bar Plots - 2 Variables "Stacked"
========================================================
```{r, bar2, eval = FALSE}
hd.tab <- table(hd$Type, hd$Day)
barplot(hd.tab)
barplot(hd.tab, col = c("burlywood", "cornflowerblue", "springgreen"))
legend("topleft", legend = levels(hd$Type), bty = "n",
       fill = c("burlywood", "cornflowerblue", "springgreen"))
```

```{r, bar2_plot, echo = FALSE, fig.align = 'center', fig.width = 12, fig.height = 7}
par(mfrow = c(1, 2))
<<bar2>>
```

Bar Plots - 2 Variables "Beside"
========================================================
```{r, bar3, eval = FALSE}
hd.tab <- table(hd$Day, hd$Type)
barplot(hd.tab, beside = TRUE)
barplot(hd.tab, beside = TRUE, col = rainbow(5))
legend("topright", legend = levels(hd$Day), bty = "n", fill = rainbow(5))
```

```{r, bar3_plot, echo = FALSE, fig.align = 'center', fig.width = 12, fig.height = 7}
par(mfrow = c(1, 2))
<<bar3>>
```

Bar Plot Challenge
========================================================
type: prompt
1. Create a "Beside" bar plot with Brand on the x-axis grouped by Type. 
2. Experiment with adding color and a legend (hint: try ```heat.colors(3)```)

Bar plot Challenge Solution
========================================================
type: prompt
```{r, bar_ch_sol, fig.align = 'center'}
hd.tab <- table(hd$Type, hd$Brand)
barplot(hd.tab, beside = TRUE, col = heat.colors(3))
legend("topleft", legend = levels(hd$Type), bty = "n", fill = heat.colors(3))
```

Summarize with Basic Functions
========================================================
```{r, summ_base, fig.align = 'center'}
summary(hd)
plot(hd)
```

Summarize with psych
========================================================
```{r, summ_psych1, fig.align = 'center'}
require(psych)
describe(hd)
```

Summarize with psych
========================================================
```{r, summ_psych2, fig.align = 'center', results = 'hide'}
pairs.panels(hd)
```

Summarize with Hmisc
========================================================
```{r, summ_hmisc}
require(Hmisc)
describe(hd)
```

Summarize with dplyr
========================================================
```{r, install_dplyr, eval = FALSE}
# Install package if needed
install.packages("dplyr")
```
```{r, summ_dplyr}
require(dplyr)
hd %.%
  group_by(Day) %.%
  summarise(n = length(Type),
            mean.cals = mean(Calories),
            sd.cals = sd(Calories),
            se.cals = sd.cals / sqrt(n),
            misc.stat = mean.cals / mean(Sodium))
```
See an excellent ```dplyr``` tutorial
[here](http://cran.r-project.org/web/packages/dplyr/vignettes/introduction.html)

dplyr Challenge
========================================================
type: prompt
Use **```dplyr```** to summarize the n, mean, standard deviation and standard 
error of hot dog sodium by **Brand**

**Bonus:** Summarize by **Brand** and **Type**

dplyr Challenge Solution
========================================================
type: prompt
```{r, ch4_1}
hd %.%
  group_by(Brand) %.%
  summarise(n = length(Type),
            mean.sod = mean(Sodium),
            sd.sod = sd(Sodium),
            se.sod = sd.sod / sqrt(n))
```

dplyr Challenge Bonus Solution
========================================================
type: prompt
```{r, ch4_2}
hd %.%
  group_by(Brand, Type) %.%
  summarise(n = length(Type),
            mean.sod = mean(Sodium),
            sd.sod = sd(Sodium),
            se.sod = sd.sod / sqrt(n))
```


Histograms
========================================================
```{r, base_hist1, fig.align = 'center', fig.width = 3, fig.height = 3}
hist(hd$Calories)
with(hd, hist(Calories, breaks = 10))
```

***

```{r, base_hist2, fig.align = 'center', fig.width = 3, fig.height = 3}
with(hd, hist(Calories))
with(hd, hist(Calories, freq = FALSE))
```

Histogram with Density
========================================================
```{r, base_hist_density, fig.align = 'center'}
with(hd, hist(Calories, freq = FALSE))
lines(density(hd$Calories), col = "red")
```

Histogram Challenge
========================================================
type: prompt
Plot histograms for sodium by hot dog type (i.e., one each for beef, meat, and 
poultry).

**Hint**: subset the data

Histogram Challenge Solutions
========================================================
type: prompt
```{r, ch5_sol1, eval = FALSE}
with(subset(hd, hd$Type == "Beef"), hist(Sodium, main = "Beef"))
hist(hd$Sodium[hd$Type == "Beef"], main = "Beef")
with(hd[hd$Type == "Beef", ], hist(Sodium, main = "Beef"))
```
```{r, ch5_sol2, echo = FALSE, fig.align = 'center', fig.width = 3, fig.height = 3}
with(subset(hd, hd$Type == "Beef"), hist(Sodium, main = "Beef"))
```

```{r, ch5_sol3, eval = FALSE}
with(subset(hd, hd$Type == "Meat"), hist(Sodium, main = "Meat"))
with(subset(hd, hd$Type == "Poultry"), hist(Sodium, main = "Poultry"))
```
```{r, ch5_sol4, echo = FALSE, fig.align = 'center', fig.width = 7, fig.height = 3}
par(mfrow = c(1, 2))
<<ch5_sol3>>
```

Box Plots - Single Vector
========================================================
```{r, base_box1, fig.align = 'center'}
# Specifying a vector
boxplot(hd$Calories)
```

***

```{r, base_box2, fig.align = 'center'}
boxplot(hd$Calories, xlab = "Calories", main = "All Hot Dogs")
```

Box Plots - Continuous Variable and a Factor
========================================================
```{r, box_2v1, fig.align = 'center'}
boxplot(Calories ~ Type, data = hd, main = "Calories by Type", 
        xlab = "Hot Dog Type", ylab = "Calories")
```

Box Plots - Continuous Variable and a Factor (Horizontal)
========================================================
```{r, box_2v2, fig.align = 'center'}
boxplot(Calories ~ Type, data = hd, main = "Calories by Type", 
        ylab = "Hot Dog Type", xlab = "Calories", 
        horizontal = TRUE)
```

Box Plots - Continuous Variable and 2 Factors
========================================================
```{r, box_2v3, fig.align = 'center', fig.width=12}
boxplot(Calories ~ Brand * Type, data = hd, main = "Calories", 
        xlab = "Brand and Type")
```

Box Plots - Continuous Variable and 2 Factors (with Color)
========================================================
```{r, box_2v4, fig.align = 'center', fig.width=12}
boxplot(Calories ~ Brand * Type, data = hd, main = "Calories", 
        xlab = "Brand and Type", col = c("green", "red"))
```

Box Plots - Data Frames
========================================================
```{r, box_2v5, fig.align = 'center'}
boxplot(hd)
```

***

```{r, box_2v6, fig.align = 'center'}
boxplot(hd[4:5])
```

Box Plot Challenge
========================================================
type: prompt
Create a box plot of **Sodium** by **Type**. Include the following:

1. A main title
2. Custom x and y axes labels
3. Make it horizontal
4. Different colors for each hot dog type

More colors available 
[here](http://research.stowers-institute.org/efg/R/Color/Chart/ColorChart.pdf)

Box Plot Challenge Solution
========================================================
type: prompt

```{r, ch6_sol, fig.align = 'center'}
boxplot(Sodium ~  Type, data = hd, horizontal = TRUE,
        main = "Sodium", xlab = "mg", ylab = "Hot Dog Type",
        col = c("burlywood", "cornflowerblue", "springgreen"))
```

Strip Charts
========================================================
Strip charts are sometimes more useful than box plots (especially when the 
sample size is small).

```{r, strip1, eval = FALSE}
with(hd, stripchart(Calories))
stripchart(Calories ~ Type, data = hd)
```

```{r, strip1_plot, echo = FALSE, fig.align = 'center', fig.width = 10, fig.height = 6}
par(mfrow = c(1, 2))
<<strip1>>
```

More Strip Charts
========================================================
```{r, strip2, eval = FALSE}
stripchart(Calories ~ Type * Brand, data = hd)
stripchart(Calories ~ Type * Brand, data = hd, method = "jitter", jitter = 0.1)
```

```{r, strip2_plot, echo = FALSE, fig.align = 'center', fig.width = 12, fig.height = 7}
par(mfrow = c(1, 2))
set.seed(235) # for jitter in stripchart
<<strip2>>
```

Fix Tick Labels
========================================================
```{r, strip3, fig.align = 'center'}
y.ticks <- c("B.N", "M.N", "P.N", "B.OM", "M.OM", "P.OM")
stripchart(Calories ~ Type * Brand, data = hd, yaxt = "n")
axis(2, at = 1:6, labels = y.ticks, las = 2)
```

Scatter Plots
========================================================
```{r, scatter, fig.align = 'center'}
plot(Calories ~ Sodium, data = hd)
abline(lm(Calories ~ Sodium, data = hd))
```

Making a Custom Plot
========================================================
type: section

Custom Plots
========================================================
Let's make this plot

```{r, endplot, echo = FALSE, fig.align = 'center'}
hd2 <- with(hd, data.frame(table(Day, Type)))
plot(x = hd2$Freq[hd2$Type == "Beef"], type = "o", col = "red", ylim = c(0, 10), 
     axes = FALSE, ann = FALSE)
lines(x = hd2$Freq[hd2$Type == "Meat"], type = "o", col = "forestgreen", 
      pch = 22, lty = 2)
lines(x = hd2$Freq[hd2$Type == "Poultry"], type = "o", col = "blue", 
      pch = 23, lty = 3)
title(main = "Isaac's Weekly Hot Dog Consumption", 
      col.main = "maroon", font.main = 4)
axis(1, at = 1:5, lab = levels(hd2$Day))
title(xlab = "Days", col.lab = "steelblue", font.lab = 2)
axis(2, las = 1, at = seq(0, 10, 2))
title(ylab = "Devoured", col.lab = 3, font.lab = 2)
# Add legend and text
legend(x = 1, y = 10, 
       legend = levels(hd2$Type),                  
       col = c("red", "forestgreen", "blue"),   
       pch = 21:23, lty = 1:3,                                   
       bty = "n", cex = 0.8                                      
)  
text(x = 3, y = 0.5, "SICK", col = "tomato4")
```

Step 1 - Create the Data
========================================================
We need frequency data

```{r, get_freq}
with(hd, table(Day, Type))
hd2 <- data.frame(with(hd, table(Day, Type)))
head(hd2)
```

Step 2 - Initialize the Plot
========================================================
We use **```plot()```** to open a new plotting window

```{r, init_a, fig.align = 'center'}
plot(x = hd2$Freq[hd2$Type == "Beef"], 
     type = "o", col = "red", ylim = c(0, 10), 
     axes = FALSE, ann = FALSE)
```

Step 2 - Initialize the Plot
========================================================

```{r, init_b, eval = FALSE}
<<init_a>>
```

- **```x=```** Points to plot (actually the y values here)
- **```type=```** what type of plot (see **?plot**)
- **```col=```** color of points and/or lines
- **```ylim=```** min and max y-values on y-axis
- **```axes=```** include axes?
- **```ann=```** include annotations?

Step 3 - Add a Layer
========================================================
We use **```lines()```** to add a layer to the current plot

```{r, lines1_a, eval = FALSE}
lines(x = hd2$Freq[hd2$Type == "Meat"], 
      type = "o", col = "forestgreen", 
      pch = 22, lty = 2)
```

```{r, lines1_b, echo = FALSE, fig.align = 'center'}
<<init_a>>
lines(x = hd2$Freq[hd2$Type == "Meat"], 
      type = "o", col = "forestgreen", 
      pch = 22, lty = 2)
```

Step 3 - Add a Layer
========================================================

```{r, lines1_c, eval = FALSE}
<<lines1_a>>
```

- **```x=```** Points to plot (actually the y's again)
- **```type=```** what type of plot (see **?plot**)
- **```col=```** color of points and/or lines
- **```pch=```** point symbol
- **```lty=```** line type

Step 4 - Add another Layer
========================================================

```{r, lines2_a, eval = FALSE}
lines(x = hd2$Freq[hd2$Type == "Poultry"], 
      type = "o", col = "blue", 
      pch = 23, lty = 3)
```

```{r, lines2_b, echo = FALSE, fig.align = 'center'}
<<lines1_b>>
lines(x = hd2$Freq[hd2$Type == "Poultry"], 
      type = "o", col = "blue", 
      pch = 23, lty = 3)
```

Step 5 - Add a Main Title
========================================================
We use **```title()```** to add labels to the current plot

```{r, title_a, eval = FALSE}
title(main = "Isaac's Weekly Hot Dog Consumption", 
      col.main = "maroon", font.main = 4)
```

```{r, title_b, echo = FALSE, fig.align = 'center'}
<<lines2_b>>
title(main = "Isaac's Weekly Hot Dog Consumption", 
      col.main = "maroon", font.main = 4)
```

Step 5 - Add a Main Title
========================================================

```{r, title_c, eval = FALSE}
<<title_a>>
```

- **```main=```** Title text
- **```col.main=```** color for main title
- **```font.main```** font style for main title
  - 1 = plain text
  - 2 = bold
  - 3 = italic
  - 4 = bold and italic
  
Step 6 - Customize the X-axis
========================================================
We use **```axis()```** to specify the axis ticks on the current plot

```{r, xaxis_a, eval = FALSE}
axis(side = 1, at = 1:5, lab = levels(hd2$Day))
title(xlab = "Days", col.lab = "steelblue", font.lab = 2)
```

```{r, xaxis_b, echo = FALSE, fig.align = 'center'}
<<title_b>>
axis(side = 1, at = 1:5, lab = levels(hd2$Day))
title(xlab = "Days", col.lab = "steelblue", font.lab = 2)
```

Step 6 - Customize the X-axis
========================================================

```{r, xaxis_c, eval = FALSE}
<<xaxis_a>>
```

- **```axis()```**
  - **```side=```** side of plot (1=below, 2=left, 3=above and 4=right)
  - **```at=```** points where tick marks are drawn
  - **```lab=```** custom tick labels
- **```title()```** font style for main title
  - **```xlab=```** title for x-axis
  - **```col.lab=```** color for x-axis title
  - **```font.lab=```** font style for x-axis title
  
Step 7 - Customize the Y-axis
========================================================

```{r, yaxis_a, eval = FALSE}
axis(side = 2, las = 1, at = seq(0, 10, 2))
title(ylab = "Devoured", col.lab = 3, font.lab = 2)
```

```{r, yaxis_b, echo = FALSE, fig.align = 'center'}
<<xaxis_b>>
axis(2, las = 1, at = seq(0, 10, 2))
title(ylab = "Devoured", col.lab = 3, font.lab = 2)
```

Step 8 - Add a Legend
========================================================
We use **```legend()```** to add a legend to the current plot

```{r, leg_a, eval = FALSE}
legend(x = 1, y = 10, 
       legend = levels(hd2$Type),                  
       col = c("red", "forestgreen", "blue"),   
       pch = 21:23, lty = 1:3,                                   
       bty = "n", cex = 0.8) 
```

***

```{r, leg_b, echo = FALSE, fig.align = 'center'}
<<yaxis_b>>
legend(x = 1, y = 10, 
       legend = levels(hd2$Type),                  
       col = c("red", "forestgreen", "blue"),   
       pch = 21:23, lty = 1:3,                                   
       bty = "n", cex = 0.8) 
```

Step 8 - Add a Legend (ORDER MATTERS)
========================================================
```{r, leg_c, eval = FALSE}
<<leg_a>>   
```

- **```x=, y=```** position of legend
- **```legend=```** legend text
- **```col=```** color of points and/or lines
- **```pch=```** point symbol
- **```lty=```** line type
- **```bty=```** line type ("o"=box, "n"=no box)
- **```cex=```** magnification of text/symbols

Step 9 - Add Custom Text
========================================================
We use **```text()```** to add text to the current plot

```{r, text_a, eval = FALSE}
text(x = 3, y = 0.5, lab = "SICK", col = "tomato4")
```

```{r, text_b, echo = FALSE, fig.align = 'center'}
<<leg_b>>
text(x = 3, y = 0.5, lab = "SICK", col = "tomato4")
```

Step 9 - Add Custom Text
========================================================
```{r, text_c, eval = FALSE}
<<text_a>>   
```

- **```x=, y=```** position of text
- **```lab=```** text to be written
- **```col=```** color of text

The Final Plot's Code
========================================================
```{r, final1, eval = FALSE}
<<text_b>>
```

The Final Plot
========================================================

```{r, final2, echo = FALSE, fig.align = 'center'}
<<text_b>>
```

Saving a Plot
========================================================
- Export from RStudio
- Or, export from the R console:
```{r, save_png, eval = FALSE}
# Save as png file
png("my_plot.png", width = 500, height = 500, res = 72)
plot(1:10, 1:10, pch = 1:10, col = 1:10) 
dev.off()
```

```{r, save_pdf, eval = FALSE}
# Save as pdf file
pdf("my_plot.pdf", width = 7, height = 7)
plot(1:10, 1:10, pch = 1:10, col = 1:10) 
dev.off()
```


Base Plotting System Review
========================================================
- Plot a *static* layer with ```plot(), barplot(), boxplot()```, etc.
- Plot type varies if x and y are numbers or factors
- Add new layers with ```lines()``` or ```points()```
- Customize titles and axes with ```title()``` or ```axis()```
- Options, such as color or point character, are specified with each layer
- Graphical parameters can also be changed with ```par()```; see ```?par```

Custom Plot Challenge
========================================================
type: prompt
Make this plot

```{r, cust_ch, echo = FALSE, fig.align = 'center'}
hd3 <- with(hd, data.frame(table(Day, Brand)))
plot(hd3$Freq[hd3$Brand == "Nathans"], 
     type = "o", col = "red", ylim = c(0, 10), 
     axes = FALSE, ann = FALSE)
lines(hd3$Freq[hd3$Brand == "OscarMayer"], 
      type = "o", col = "forestgreen", 
      pch = 22, lty = 2)
title(main = "Isaac Prefers Oscar Mayer Hot Dogs over Nathan's", 
      col.main = "RoyalBlue3", font.main = 4)
axis(1, at = 1:5, lab = levels(hd3$Day))
title(xlab = "Days", col.lab = "steelblue", font.lab = 2)
axis(2, las = 1, at = seq(0, 10, 2))
title(ylab = "Consumed", font.lab = 2)
legend(x = 1, y = 10, 
       legend = levels(hd3$Brand),                  
       col = c("red", "forestgreen"),   
       pch = 21:22, lty = 1:2,                                   
       bty = "n", cex = 0.8)  
text(x = 1, y = 4.65, "Fair", col = "purple4")
```

***

**Hint:**
```{r, cust_ch_hint, eval = FALSE}
hd3 <- data.frame(with(hd, table(Day, Brand)))
```

Custom Plot Challenge Solution
========================================================
type: prompt
```{r, cust_ch_sol, eval = FALSE}
<<cust_ch>>
```

ggplot2
========================================================
type: section

ggplot2 Teaser
========================================================
```{r, gg1, echo = FALSE, fig.align = 'center'}
require(ggplot2)
ggplot(hd2, aes(x = Day, y = Freq, color = Type)) +
  geom_point(aes(shape = Type)) +
  geom_line(aes(group = Type, linetype = Type)) +
  geom_text(aes(x = 3, y = 0.5, label = "SICK"), color = "tomato4") +
  ggtitle("Isaac's Weekly Hot Dog Consumption") +
  xlab("Days") +
  ylab("Devoured") +
  theme(plot.title = element_text(color = "maroon", face = "italic"),
        axis.title.x = element_text(color = "steelblue", face = "bold"),
        axis.title.y = element_text(color = "green", face = "bold"))
```

***

```{r, gg2, echo = FALSE, fig.align = 'center'}
ggplot(hd3, aes(x = Day, y = Freq, color = Brand)) +
  geom_point(aes(shape = Brand)) +
  geom_line(aes(group = Brand, linetype = Brand)) +
  geom_text(aes(x = 1, y = 4.65, label = "Fair"), color = "purple4") +
  ggtitle("Isaac Prefers Oscar Mayer Hot Dogs over Nathan's") +
  xlab("Days") +
  ylab("Consumed") +
  theme(plot.title = element_text(color = "royalblue3", face = "italic"),
        axis.title.x = element_text(color = "steelblue", face = "bold"),
        axis.title.y = element_text(face = "bold"))
```

ggplot2 Teaser Code
========================================================
```{r, gg1_code, eval = FALSE}
<<gg1>>
```

```{r, gg2_code, eval = FALSE}
<<gg2>>
```

Exercises
========================================================
type: alert
- The people at [DataCamp](https://www.datacamp.com/) have a nice
interactive, introductory R tutorial.
- Take an excel file you have and try to get it into R.
- Summarize your data numerically and graphically as we've done today.

Thank you to...
========================================================
- [The R Project for Statistical Computing](http://www.r-project.org)
- [RStudio People](http://www.rstudio.com)
- [BIO5 Institute](http://www.bio5.org/)
- [Southwest Environmental Health Sciences Center](http://swehsc.pharmacy.arizona.edu/)
- [DataCamp](https://www.datacamp.com/)




```{r, readme, eval = FALSE, include = FALSE, echo = FALSE}
# run to get readme from slide markdown
# not to be run when slides compile
file.copy("materials/day3/day3_slides.md", 
          "materials/day3/readme.md", 
          overwrite = TRUE)
```

