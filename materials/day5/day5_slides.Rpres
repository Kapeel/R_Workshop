Intro to Bioconductor
========================================================
author: Isaac Jenkins
date: March 6, 2014

Material adapted from S. Falcon, M. Morgan and  R. Gentlemans' 
[*An Introduction to Bioconductor's ExpressionSet Class*](http://www.bioconductor.org/packages/release/bioc/vignettes/Biobase/inst/doc/ExpressionSetIntroduction.pdf) 
(Thank you!)

```{r, echo = FALSE, include = FALSE}
opts_chunk$set(prompt = FALSE, cache = TRUE, dependson = 'auto')
```

Objectives
========================================================
- Learn what Bioconductor is
- Navigate the [Bioconductor website](http://www.bioconductor.org/)
- Install Bioconductor and its packages
- Create an ***ExpressionSet*** object

About Bioconductor
========================================================
> Bioconductor is an open source, open development software project
to provide tools for the analysis and comprehension of 
high-throughput genomic data. It is based primarily on the R
programming language.

*Source*: [Bioconductor](http://www.bioconductor.org/about/)


Navigate the Bioconductor Website
========================================================
Head over to:

[![Alt text](http://upload.wikimedia.org/wikipedia/en/f/f5/BioClogo.gif)](http://www.bioconductor.org/)

Installing Bioconductor
========================================================
- Bioconductor packages are run using R
- First we must install the core Bioconductor packages

```{r install, eval = FALSE}
source("http://bioconductor.org/biocLite.R")
biocLite()
```

- This installs the Bioconductor packages BiocInstaller, Biobase,
IRanges and AnnotationDbi (as well as some dependencies)
- Refresh your package list in RStudio

Installing Bioconductor Packages
========================================================
- Functionality is similar to R packages, but installation is 
different
- **CANNOT** use the Install Packages button in RStudio
- **CANNOT** use the R function ```install.packages()```
- Instead, use the ```biocLite()``` function in the 
**BiocInstaller** package

Installing Bioconductor Packages
========================================================
- Installing Bioconductor packages requires **2 steps**
  1. Load the installer package
  2. Install the desired package
- Let's install the Bioconductor package [```affy```](http://www.bioconductor.org/packages/release/bioc/html/affy.html)

```{r, install_affy, eval = FALSE}
require(BiocInstaller) # load the installer package
biocLite("affy") # install the affy package
```

- Note that step 1 only has to be done once during the current 
R session

Help for Bioconductor Packages
========================================================
- Similar to R, there are help files for all Bioconductor functions

```{r, bioc_help, eval = FALSE}
require(affy) # load the affy package
?expresso
```

- In general, there are exceptionally useful Vignettes

```{r, bioc_vignette, eval = FALSE}
browseVignettes("affy") # opens in web browser
```

A Note about Class Systems
========================================================
- R and Bioconductor packages are loaded and used similarly
- R contains an *S3* and *S4* class system
- R packages typically use the S3 system
- Bioconductor packages typically use the S4 system
- S4 is based on object-oriented programming, which is more 
formal and rigorous
- [More details on S4](http://cran.r-project.org/doc/contrib/Genolini-S4tutorialV0-5en.pdf)

Example: ExpressionSet Object
========================================================
- The **Biobase** package contains standardized data structures 
to represent genomic data
- The idea is to combine multiple sources of information into one 
convenient structure
- The *ExpressionSet* class is a common example of these 
structures
- It is the input and output of many Bioconductor functions

ExpressionSet Components
========================================================
- **assayData**: expression data from microarray experiments
- **phenoData**: metadata describing the experiment's samples
- **featureData**: metadata about the features in the experiment
- **annotation**: the platform on which the samples were assayed
- **experimentData**: a flexible structure for describing the 
experiment

What are Microarrays?
========================================================
[![Alt text](http://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Heatmap.png/480px-Heatmap.png)](http://en.wikipedia.org/wiki/DNA_microarray)

ExpressionSet from a .CEL file
========================================================
- One may have an output file from a microarray chip manufacturer
- Possible strategy is to use a bioconductor package 
(e.g., affy or limma) to read in the data as an *ExpressionSet*
or other type of object
- It is sometimes possible to convert other types of Bioconductor objects into *ExpressionSets* using the 
[```convert```](http://www.bioconductor.org/packages/release/bioc/html/convert.html) 
package
```{r, convert, eval = FALSE}
biocLite("convert")
require(convert)
as(myObject, "ExpressionSet")
```
- When none of this works...

Build an ExpressionSet from Scratch
========================================================
- It's likely that your data resides in conceptually distinct parts:
  - assay data
  - phenotype meta-data
  - feature annotation
  - experiment data
- We can load these parts individually and merge them into an
*ExpressionSet* object ... sort of like Voltron.

![Alt text](http://upload.wikimedia.org/wikipedia/en/b/b0/Voltron_boxart.jpg)

Possible Scenario
========================================================
- You identify a Bioconductor package that is perfect for your 
analysis (e.g., 
[```ChromHeatMap```](http://www.bioconductor.org/packages/release/bioc/html/ChromHeatMap.html))
- The package takes an *ExpressionSet* object as input
- Your data is stored in an excel spreadsheet or .csv file

**What do you do?** ... Build an *ExpressionSet* object.

Gather the Data
========================================================
1. Create a new RStudio project
2. If data is in an Excel file, export to csv 
(I've already done this)
3. Put the csv files in your working directory
  - Get the files and move them your preferred way: 
  [file1](http://icj.github.io/R_Workshop/materials/day5/expression.csv) and 
  [file2](http://icj.github.io/R_Workshop/materials/day5/phenotype.csv)
  - Or, run this:
  
```{r, get_data, eval = FALSE}
myURL <- "http://icj.github.io/R_Workshop/materials/day5/"
download.file(paste0(myURL, "expression.csv"), "expression.csv")
download.file(paste0(myURL, "phenotype.csv"), "phenotype.csv")
```

Load Assay/Expression Data
========================================================
- Use ```read.csv()``` to load the expression data

```{r, load_expression}
express <- read.csv("expression.csv", 
                    stringsAsFactors = FALSE,
                    row.names = 1)
```

- **```row.names = 1```** tells it the first column should be read in 
as row names

- We want this to be a ```matrix```

```{r, matrix_expression}
express <- as.matrix(express)
```

Check Assay/Expression Data
========================================================
```{r, check_expression1}
class(express)
mode(express)
typeof(express)
dim(express)
```

***

```{r, check_expression2}
express[1:15, 1:2]
```

We could stop here...
========================================================
A minimal *ExpressionSet* object has only the expression data

```{r, minimal}
require(Biobase)
minimalSet <- ExpressionSet(assayData = express)
minimalSet
```

But we won't.

Load Phenotype Data
========================================================
- Use ```read.csv()``` to load the phenotype data

```{r, load_phenotype}
pheno <- read.csv("phenotype.csv", 
                  colClasses = c("character", rep("factor", 2),
                                 "numeric"),
                  row.names = 1,
                  skip = 4)
```

- **```colClasses=```**: tells it what class of variable each 
column should be read in as

Check Phenotype Data
========================================================
```{r, check_pheno1}
head(pheno)
str(pheno)
```

Summarize Phenotype Data
========================================================
```{r, check_pheno2}
summary(pheno)
```

Challenge
========================================================
type: prompt
1. Investigate the row and column names of the expression data.
2. Investigate the row and column names of the phenotype data.
3. What should be true about the columns of our expression data 
and the rows of our phenotype data?
4. How can you verify this in R? (hint: ```?identical```)

Challenge Solutions
========================================================
type: prompt
**The row names of the phenotype data should be identical to 
the column names of the expression data.**
```{r, ch1_sol}
head(rownames(pheno))
head(colnames(express))
identical(rownames(pheno), colnames(express))
```

Metadata: Data about phenotype data
========================================================
- The column names of the phenotype data can often become cryptic
```{r, pheno_names, echo = FALSE}
colnames(pheno)
```
- Create a metadata data frame to store more meaningful descriptions
```{r, meta_df, tidy = FALSE}
meta <- data.frame(labelDescription = 
                     c("Sex of the patient at beginning of study",
                       "Case/control status", 
                       "Huffmann-Berelizka score of psychocognitive transcendance"),
                   row.names = colnames(pheno))
meta
```

AnnotatedDataFrame object
========================================================
- An ```AnnotatedDataFrame``` consists of two parts:
  1. A collection of samples and the values of variables measured on those samples
  2. A description of each variable measured
- It links the phenotype data and metadata

AnnotatedDataFrame object
========================================================
```{r, pheno_adf}
pheno.adf <- new("AnnotatedDataFrame",
                 data = pheno,
                 varMetadata = meta)
pheno.adf
```

Conveniently access pheno.adf elements
========================================================
```{r, access_pheno_adf1}
# Get sample names
sampleNames(pheno.adf)
# Get variable descriptions
varMetadata(pheno.adf)
# Get phenotype data
pData(pheno.adf)
```

Annotations / Feature Metadata
========================================================
- Metadata on features is as important as metadata on samples
- We can either...
  - supply our own feature metadata
  - use pre-compiled feature data packages
- Bioconductor stores feature data package by type of chip or 
instrument
- The package "hgu95av2.db" contains feature data for the 
Affymetrix hgu95av2 chip
```{r, feature_md}
# biocLite("hgu95av2.db")
annot <- "hgu95av2.db"
```

Experiment Data
========================================================
- Basic details about the experiment
- Stored in a Microarray Experiment Information object (MIAME)
```{r, miame}
experiment <- new("MIAME",
                  name = "Walter White",
                  lab = "Superlab under Lavanderia Brillante",
                  contact = "wwhite@secretlab.com",
                  title = "Breaking Bad",
                  abstract = "Running a secret meth lab...",
                  url = "www.breakingbad.com",
                  other = list(partner = "Jesse Pinkman",
                               boss = "Gustavo Fring"))
```

Experiment Data
========================================================
```{r, exp_data, dependson = "miame"}
experiment
abstract(experiment)
```

See [```?MIAME```](http://svitsrv25.epfl.ch/R-doc/library/Biobase/html/class.MIAME.html) for available slots

Assemble the ExpressionSet
========================================================
We have...
  - Assay/expression data: **```express```**
  - Phenotype data and its metadata: **```pheno.adf```**
  - Annotation/feature metadata: **```annot```**
  - Experiment data: **```experiment```**
  
Assemble the ExpressionSet
========================================================
Use the **```ExpressionSet()```** function to assemble the 
*ExpressionSet*
```{r, assemble}
exampleSet <- ExpressionSet(assayData = express,
                            phenoData = pheno.adf,
                            annotation = annot,
                            experimentData = experiment)
exampleSet
```

Access the ExpressionSet
========================================================
- Use ```$``` to access columns of phenotype data
```{r, dollar}
head(exampleSet$gender)
```
- Use ```featureNames()``` or ```sampleNames()```
```{r, fnames}
head(featureNames(exampleSet))
head(sampleNames(exampleSet))
```

Access the ExpressionSet
========================================================
- Retrieve the expression/assay data using ```exprs()```
```{r, exprs}
exprs(exampleSet)[1:5, 1:7]
```
- Retrieve the phenotype data frame using ```pData()```
```{r, pData}
pData(exampleSet)
```

Subset the ExpressionSet
========================================================
Create a subset of the *ExpressionSet* consisting of the first 5 
features and first 3 subjects

```{r, subset1}
ss <- exampleSet[1:5, 1:3]
dim(ss)
featureNames(ss)
sampleNames(ss)
```

Subset the ExpressionSet
========================================================
Create a subset of consisting of only male samples

```{r, subset2}
males <- exampleSet[, exampleSet$gender == "Male"]
males
```

Use the ExpressionSet as Input
========================================================
We'll use the ```ChromHeatMap``` package to quickly demonstrate 
how quickly our *ExpressionSet* can be utilized.

> The [```ChromHeatMap```](http://www.bioconductor.org/packages/release/bioc/html/ChromHeatMap.html) 
package provides functions for visualising
expression data in a genomic context, by generating heat map 
images in which data is plotted along a given chromosome for all
the samples in a data matrix.

Use the ExpressionSet as Input
========================================================
To use ```ChromHeatMap``` we will:

1. Use our *ExpressionSet* as input
2. Map the expression data onto chromosome coordinates
3. Plot the heatmap

Use the ExpressionSet as Input
========================================================
```{r, chrheatmap1, eval = FALSE}
biocLite("ChromHeatMap") # install the package
require(ChromHeatMap) # load the package

# map the expression data onto chromosome coordinates
chrdata <- makeChrStrandData(exampleSet,
                             lib = annotation(exampleSet))
plotChrMap(chrdata, chr = 19)
```

```{r, chrheatmap2, fig.align = 'center', echo = FALSE}
require(ChromHeatMap) # load the package

# map the expression data onto chromosome coordinates
chrdata <- makeChrStrandData(exampleSet,
                             lib = annotation(exampleSet))
plotChrMap(chrdata, chr = 19)
```

Thank you to...
========================================================
- [The Bioconductor People](http://www.bioconductor.org/)
- Seth Falcon, Martin Morgan and Robert Gentleman: 
[Intro to *ExpressionSet*](http://www.bioconductor.org/packages/2.13/bioc/vignettes/Biobase/inst/doc/ExpressionSetIntroduction.pdf)
- Tim F. Rayner: [ChromHeatMap](http://www.bioconductor.org/packages/release/bioc/html/ChromHeatMap.html)
- [The R Project for Statistical Computing](http://www.r-project.org)
- [RStudio People](http://www.rstudio.com)
- [BIO5 Institute](http://www.bio5.org/)
- [Southwest Environmental Health Sciences Center](http://swehsc.pharmacy.arizona.edu/)

R Session Info
========================================================
```{r, r_session, echo = FALSE}
sessionInfo()
```




```{r, readme, eval = FALSE, include = FALSE, echo = FALSE}
# run to get readme from slide markdown
# not to be run when slides compile
file.copy("materials/day5/day5_slides.md", 
          "materials/day5/readme.md", 
          overwrite = TRUE)
```
